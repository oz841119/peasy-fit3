// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                            @id @default(uuid()) @db.Uuid
  email                        String?                           @unique
  password                     String?
  salt                         String?
  exerciseList                 Exercise[]                        @relation("UserExerciseList")
  googleId                     String?                           @unique
  name                         String?
  createdAt                    DateTime                          @default(now())
  updatedAt                    DateTime                          @updatedAt
  trainingSessions             TrainingSession[]
  currentTrainingSessionStatus UserCurrentTrainingSessionStatus?
}

model Exercise {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]   @relation("UserExerciseList")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Training {
  id                Int              @id @default(autoincrement())
  userId            String           @db.Uuid
  date              DateTime
  reps              Int
  weight            Float
  comment           String           @default("")
  exerciseId        Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  TrainingSession   TrainingSession? @relation(fields: [trainingSessionId], references: [id])
  trainingSessionId Int?
}

model TrainingSession {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.Uuid
  trainings Training[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model UserCurrentTrainingSessionStatus {
  id        String    @id @default(uuid())
  userId    String    @unique @db.Uuid
  User      User      @relation(fields: [userId], references: [id])
  isActive  Boolean
  startedAt DateTime
  endedAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
