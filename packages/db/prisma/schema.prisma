// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                            @id @default(uuid()) @db.Uuid
  email                        String?                           @unique @db.VarChar(255)
  password                     String?                           @db.VarChar(30)
  salt                         String?
  exerciseList                 Exercise[]                        @relation("UserExerciseList")
  googleId                     String?                           @unique
  name                         String?                           @db.VarChar(30)
  createdAt                    DateTime                          @default(now())
  updatedAt                    DateTime                          @updatedAt
  trainingSessions             TrainingSession[]
  currentTrainingSessionStatus UserCurrentTrainingSessionStatus?
}

model Exercise {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(30)
  users     User[]   @relation("UserExerciseList")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Training {
  id                Int              @id @default(autoincrement())
  userId            String           @db.Uuid
  date              DateTime
  reps              Int
  weight            Float
  comment           String           @default("") @db.VarChar(255)
  exerciseId        Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  trainingSession   TrainingSession? @relation(fields: [trainingSessionId], references: [id])
  trainingSessionId Int?
}

model TrainingSession {
  id                               Int                               @id @default(autoincrement())
  user                             User                              @relation(fields: [userId], references: [id])
  userId                           String                            @db.Uuid
  trainings                        Training[]
  name                             String                            @db.VarChar(30)
  createdAt                        DateTime                          @default(now())
  updatedAt                        DateTime                          @updatedAt
  startAt                          DateTime
  endAt                            DateTime?
  UserCurrentTrainingSessionStatus UserCurrentTrainingSessionStatus?
}

model UserCurrentTrainingSessionStatus {
  id                String          @id @default(uuid())
  userId            String          @unique @db.Uuid
  User              User            @relation(fields: [userId], references: [id])
  isActive          Boolean
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  trainingSession   TrainingSession? @relation(fields: [trainingSessionId], references: [id])
  trainingSessionId Int?             @unique
}
